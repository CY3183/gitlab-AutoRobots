"""
Django settings for AutoRobot project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
import configparser



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-pdf^=oef&11jy55(0q_kxe0xc+f87x(v@f1*)96n3_1=t7fia7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["*"]
CSRF_TRUSTED_ORIGINS = ['https://wunlzt.cdwh.gov.cn', ]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'Reply_Listen_Flow',
    'Sign_Listen_Form'
]
TEST_CONF_DIR = os.path.join(BASE_DIR,"common/test_conf.ini")

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'AutoRobot.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'AutoRobot.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# STATIC_URL = '/llapi/admin/static/'
# STATIC_ROOT = os.path.join(BASE_DIR,'static')

STATIC_URL = 'llapi/admin/static/'
STATIC_ROOT = os.path.join(BASE_DIR,'static')


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

BROKER_URL = 'redis://:123456@redis:6379/14'  # 任务容器地址，redis数据库地址
CELERY_RESULT_BACKEND = 'redis://:123456@redis:6379/15'  # 任务结束的地址

# BROKER_URL = 'redis://:123456@127.0.0.1:6379/14'  # 任务容器地址，redis数据库地址
# CELERY_RESULT_BACKEND = 'redis://:123456@127.0.0.1:6379/15'  # 任务结束的地址

cf= configparser.ConfigParser()
cf.read(TEST_CONF_DIR)
FORM_URL = cf.get("test_robot_conf","FORM_URL")
form_id = int(cf.get("test_robot_conf","form_id"))
form_user_id = int(cf.get("test_robot_conf",'form_user_id'))
ROBOT_URL = cf.get("test_robot_conf","ROBOT_URL")
method = cf.get("test_robot_conf","method")
Content_Type = cf.get("test_robot_conf","Content_Type")
feishu = cf.get("test_robot_conf","feishu")
secret = cf.get("test_robot_conf","secret")
SKY_URL = cf.get("test_robot_conf","SKY_URL")
DISPATCH = cf.get("test_robot_conf","DISPATCH")
flow_id = int(cf.get("test_robot_conf","flow_id"))
user_id = int(cf.get("test_robot_conf","user_id"))
APPID = cf.get("test_robot_conf","APPID")
APPSECRET = cf.get("test_robot_conf","APPSECRET")
ID = int(cf.get("test_robot_conf","ID"))



LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',  # 使用 StreamHandler 输出到控制台
        },
    },
    'loggers': {   # 输入
        'django': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'apis': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# 缓存配置
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}
